# Складність жадібного алгоритму задачі про рюкзак - O(nlogn) - 
# 2. Жадібний алгоритм (Greedy algorithm) - складність O(n*log(n)), найкращий локальний вибір, але не завжди оптимальний

# Реалізація жадібного алгоритму для задачі про рюкзак
# Клас Item, що представляє предмет із вагою та вартістю
class Item:
    def __init__(self, weight, value):
        self.weight = weight  # Вага предмета
        self.value = value  # Вартість предмета
        self.ratio = value / weight  # Співвідношення вартості до ваги для предмета

# Функція knapSack, яка обчислює максимальну вартість рюкзака, використовуючи жадібний алгоритм
def knapSack(items: list[Item], capacity: int) -> int:
    # Сортуємо предмети за співвідношенням вартості до ваги у спадаючому порядку
    items.sort(key=lambda x: x.ratio, reverse=True)
    
    total_value = 0  # Змінна для зберігання загальної вартості предметів у рюкзаку

    # Проходимо через всі предмети
    for item in items:
        # Якщо залишкова місткість рюкзака більша або дорівнює вазі предмета
        if capacity >= item.weight:
            capacity -= item.weight  # Зменшуємо залишкову місткість рюкзака
            total_value += item.value  # Додаємо вартість предмета до загальної вартості

    return total_value  # Повертаємо загальну вартість предметів у рюкзаку

# Дані предметів
items = [Item(10, 60), Item(20, 100), Item(30, 120)]
# Місткість рюкзака
capacity = 50
# Виклик функції та вивід результату
print(knapSack(items, capacity))  # Очікуваний результат: 160
