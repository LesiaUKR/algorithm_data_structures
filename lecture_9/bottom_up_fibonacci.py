# 2. Нижній підхід (Bottom-Up), або висхідне динамічне програмування, використовується для ітеративних алгоритмів.
# В цьому підході результати обчислень зберігаються в масиві або списку.
# часова складність алгоритму - O(n)

# Нижній підхід (Bottom-Up) на прикладі чисел Фібоначчі за допомогою ітерації
def fibonacci_bottom_up(n):
    # Базові випадки
    if n == 0:
        return 0
    elif n == 1:
        return 1

    # Починаємо з базових випадків і нарощуємо розв'язок
    fib_numbers = [0] * (n + 1)  # Створюємо список для збереження чисел Фібоначчі
    fib_numbers[1] = 1  # Встановлюємо перше число Фібоначчі

    # Обчислюємо числа Фібоначчі знизу вгору
    for i in range(2, n + 1):
        fib_numbers[i] = fib_numbers[i - 1] + fib_numbers[i - 2]  # Кожне число є сумою двох попередніх
        print(fib_numbers)
    return fib_numbers[n]  # Повертаємо n-те число Фібоначчі

n = 10
fib_number_bottom_up = fibonacci_bottom_up(n)
print(fib_number_bottom_up)  # Виводимо 55
