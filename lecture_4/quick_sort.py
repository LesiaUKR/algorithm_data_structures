# Quicksort - обирається опорний елемент, розбиває масив на дві частини,
# одна з яких містить елементи менші за опорний, а інша - більші.
# головне - вибір опорного елементу
# Часова складність — логарифмічна O(n⋅logn) у середньому випадку, але 
# квадратична O(n^2) у найгіршому випадку

# Реалізація алгоритму Quicksort на Python з використанням рекурсії
def quicksort(arr_):
    # Робимо копію вхідного списку arr_, щоб не змінювати оригінал
    arr = arr_
    # Базовий випадок рекурсії: якщо масив порожній або має один елемент, він вже відсортований
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]  # Вибираємо середній елемент як опорний (pivot)
    left = [x for x in arr if x < pivot] # Всі елементи, менші за опорний, додаємо до списку left
    middle = [x for x in arr if x == pivot] # Всі елементи, рівні опорному, додаємо до списку middle
    right = [x for x in arr if x > pivot] # Всі елементи, більші за опорний, додаємо до списку right
    return quicksort(left) + middle + quicksort(right) # Рекурсивно сортуємо left і right та об'єднуємо з middle

print(quicksort([5, 3, 8, 4, 2]))
# Виведе: [2, 3, 4, 5, 8]
