# має бути відсортований список
# ділить список на дві частини і перевіряє чи є середній елемент рівний шуканому
# якшо ні, то перевіряє чи шуканий елемент більший чи менший за середній
# відповідно до цього вибирається ліва або права половина списку для подальшого пошуку
# продовжується цей процес доки не буде знайдений шуканий елемент
# кожен раз список зменшується вдвічі поки не буде знайдений шуканий елемент
# або поки список не буде пустим, що означає що шуканий елемент відсутній
# часова складність O(log n) - це означає, що збільшення кількості елементів у два рази 
# збільшить кількість кроків, необхідних для знаходження елемента, лише на один
# log₂(8) = 3
# у якому степені 2 потрібно підняти 2, щоб отримати 8. 3 - це степінь
# часто основу логарифма не вказують і запис виглядає просто як log(8) = 3
# якщо не вказано основу, то вважається, що вона дорівнює 2, тобто двійковий логарифм — це логарифм з основою 2
# бінарний пошук - використовує концепцію двійкового логарифма, оскільки з кожним порівнянням масив "зменшується" вдвічі

def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    mid = 0
 
    while low <= high:
 
        mid = (high + low) // 2
 
        # якщо x більше за значення посередині списку, ігноруємо ліву половину
        if arr[mid] < x:
            low = mid + 1
 
        # якщо x менше за значення посередині списку, ігноруємо праву половину
        elif arr[mid] > x:
            high = mid - 1
 
        # інакше x присутній на позиції і повертаємо його
        else:
            return mid
 
    # якщо елемент не знайдений
    return -1

arr = [2, 3, 4, 10, 40]
x = 10
result = binary_search(arr, x)
if result != -1:
    print(f"Element is present at index {result}")
else:
    print("Element is not present in array")