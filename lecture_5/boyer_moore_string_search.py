# https://www.youtube.com/watch?v=2rtRQHyKNb4
# Алгоритм Боєра-Мура — це алгоритм пошуку підрядка, який оптимізований для сканування тексту справа наліво. 
# Ідея алгоритму полягає в тому, що коли відбувається порівняння зразка з текстом та при цьому останній символ
#  зразка не збігається з поточним символом тексту, ми можемо безпечно змістити зразок далі, 
# залежно від місця останнього входження даного символу в зразок.
# Розглянемо основні етапи алгоритму:
# Перший етап — попередня обробка. Він полягає у створенні таблиць поганого символу чи доброго суфікса.
# Таблиця поганого символу. Для кожного символу в алфавіті ця таблиця вказує, наскільки потрібно 
# змістити підрядок вперед, коли цей символ не відповідає поточному символу тексту при порівнянні. 
# Якщо символу немає в підрядку, підрядок зсувається на його довжину. Якщо символ присутній у підрядку, 
# підрядок зсувається так, щоб символ підрядка збігався з поточним символом тексту.
# Таблиця доброго суфікса використовується, коли відбувається часткове збігання підрядка і тексту. 
# Ця таблиця допомагає визначити, наскільки потрібно змістити підрядок вперед.
# Другий етап алгоритму — це пошук, який виконується за допомогою двох вкладених циклів.
# Перший цикл виконується, поки індекс підрядка не буде менше або рівний різниці між довжиною тексту та підрядка.
# Другий цикл виконується, поки індекс підрядка не буде менше нуля та символи підрядка та тексту збігаються.
# Якщо всі символи підрядка збігаються, повертається індекс, в якому знайдено підрядок.
# Якщо підрядок не знайдено, повертається -1.
# найкращому випадку алгоритм Боєра-Мура може мати лінійну часову складність O(n), де n — це довжина тексту
# у найгіршому випадку особливо коли символи підрядка часто зустрічаються в тексті, але сам підрядок не знаходиться,
# часова складність може досягти O(n⋅m), де m — це довжина підрядка
# У загальному випадку алгоритм Боєра-Мура, завдяки своїй стратегії зсуву, часто виявляється швидшим у порівнянні 
# з багатьма іншими алгоритмами пошуку.

# Реалізація алгоритму Боєра-Мура:

def build_shift_table(pattern):
    """Створити таблицю зсувів для алгоритму Боєра-Мура."""
    table = {}  # Ініціалізуємо порожню таблицю зсувів
    length = len(pattern)  # Визначаємо довжину підрядка
    # Для кожного символу в підрядку, крім останнього, встановлюємо зсув рівний довжині підрядка мінус поточний індекс мінус 1
    for index, char in enumerate(pattern[:-1]):
        table[char] = length - index - 1
    # Якщо символу немає в таблиці, зсув буде дорівнювати довжині підрядка
    table.setdefault(pattern[-1], length)
    return table  # Повертаємо таблицю зсувів

def boyer_moore_search(text, pattern):
    # Створюємо таблицю зсувів для патерну (підрядка)
    shift_table = build_shift_table(pattern)
    i = 0  # Ініціалізуємо початковий індекс для основного тексту

    # Проходимо по основному тексту, порівнюючи з підрядком
    while i <= len(text) - len(pattern):
        j = len(pattern) - 1  # Починаємо з кінця підрядка

        # Порівнюємо символи від кінця підрядка до його початку
        while j >= 0 and text[i + j] == pattern[j]:
            j -= 1  # Зсуваємось до початку підрядка

        # Якщо весь підрядок збігається, повертаємо його позицію в тексті
        if j < 0:
            return i  # Підрядок знайдено

        # Зсуваємо індекс i на основі таблиці зсувів
        # Це дозволяє "перестрибувати" над неспівпадаючими частинами тексту
        i += shift_table.get(text[i + len(pattern) - 1], len(pattern))

    # Якщо підрядок не знайдено, повертаємо -1
    return -1

text = "Being a developer is not easy"
pattern = "developer"

position = boyer_moore_search(text, pattern)
if position != -1:
    print(f"Substring found at index {position}")
else:
    print("Substring not found")
