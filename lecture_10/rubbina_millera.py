# Рандомізовані алгоритми - алгоритми, які використовують випадковість для вирішення задачі.
# Приклади рандомізованих алгоритмів:
# 1. Монте-Карло алгоритми - алгоритми, які використовують випадковість для вирішення задачі.
# 2. Алгоритми Лас-Вегас - алгоритми, які завжди повертають правильний результат, 
# але можуть працювати різними швидкостями.
# 3. Алгоритм Міллера-Рабіна - алгоритм для тестування простоти числа.
# 4. Хешування із універсальними хеш-функціями - де випадково обрана хеш-функція із сімейства
# гарантує гарні характеристики хешування

# Основна ідея тесту Рабіна-Міллера полягає у використанні властивостей 
# модульної арифметики та малої теореми Ферма.
# Алгоритм Міллера-Рабіна
import random

def is_prime(n, k=5):  # k - кількість ітерацій
    # Перевірка базових випадків
    if n <= 1 or n == 4:
        return False  # Числа менші або рівні 1, а також 4 - не прості
    if n <= 3:
        return True  # 2 і 3 є простими числами

    # Знаходимо r та d такі, що n - 1 = d * 2^r
    d = n - 1
    r = 0
    while d % 2 == 0:
        d //= 2
        r += 1

    # Проводимо k ітерацій тесту Міллера-Рабіна
    for _ in range(k):
        # Випадковий вибір базового числа a
        a = random.randint(2, n - 2)
        # Обчислення x = a^d % n
        x = pow(a, d, n)
        if x == 1 or x == n - 1:
            continue
        for _ in range(r - 1):
            # Обчислення x = x^2 % n
            x = pow(x, 2, n)
            if x == n - 1:
                break
        else:
            return False  # Якщо x не стає n - 1, то n є складеним числом
    return True  # Якщо жодна з k ітерацій не виявила n складеним, вважаємо його простим

# Приклад використання:
n = 561  # Число Кармайкла
print(is_prime(n))  # поверне False, хоча 561 - псевдопросте число
