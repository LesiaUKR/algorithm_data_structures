# Алгоритм Флойда-Воршала — це алгоритм динамічного програмування, 
# який використовується для знаходження найкоротших шляхів між усіма
# парами вершин у ваговому графі (який може містити як додатні, так і від'ємні ваги ребер).
# Однак, алгоритм не працює, якщо у графі є цикли з від'ємною вагою.

# Часова складність алгоритму Флойда-Воршала становить O(n^3), 
# де n — кількість вершин у графі. Це робить його досить ефективним 
# для розрахунків у графах з невеликою або середньою кількістю вершин

def floyd_warshall(graph):
    # Кількість вершин у графі
    n = len(graph)
    
    # Ініціалізація матриці відстаней, заповненої значеннями 'inf' (нескінченність)
    distance = [[float('inf')] * n for _ in range(n)]
    
    # Заповнення діагоналі нулями (відстань від вершини до самої себе)
    for i in range(n):
        distance[i][i] = 0
    
    # Заповнення матриці відстаней вагами ребер з вхідної матриці графу
    for i in range(n):
        for j in range(n):
            if graph[i][j] != 0:
                distance[i][j] = graph[i][j]
    
    # Основний алгоритм Флойда-Уоршалла для оновлення матриці відстаней
    for k in range(n):
        for i in range(n):
            for j in range(n):
                # Встановлюємо мінімальну відстань між вершинами i і j через вершину k
                distance[i][j] = min(distance[i][j], distance[i][k] + distance[k][j])
    
    return distance

# Матриця суміжності, де 0 означає відсутність ребра між вершинами
graph = [
    [0, 3, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0],
    [0, 0, 0, 7, 0, 2],
    [0, 0, 0, 0, 0, 0],
    [0, 0, 0, 2, 0, 3],
    [0, 0, 0, 0, 0, 0]
]

# Викликаємо функцію floyd_warshall з заданим графом і зберігаємо результат у distance_matrix
distance_matrix = floyd_warshall(graph)

# Виводимо матрицю найкоротших відстаней для кожної пари вершин
for row in distance_matrix:
    print(row)
