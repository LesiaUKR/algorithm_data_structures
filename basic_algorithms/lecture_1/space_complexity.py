# 1. O(1) - Алгоритм використовує сталий обсяг пам'яті, незалежно від розміру вхідних даних
# отримання елемента з масиву за індексом:
def get_item_by_index(items, index):
    return items[index]
# Завжди виконується одна операція, незалежно від розміру списку

# 2. O(n) - Алгоритм використовує обсяг пам'яті, пропорційний розміру вхідних даних
# найчастіше трапляється, коли ми створюємо копію вхідних даних або зберігаємо проміжні результати
# операція обернення списку

def reverse_list(items):
   return items[::-1]
# Створюється новий список, який містить всі елементи вхідного списку

print(reverse_list([1, 2, 3, 4, 5]))


# 3. O(n^2) - Алгоритм використовує обсяг пам'яті, пропорційний квадрату розміру вхідних даних
#  часто трапляється при роботі з масивами, що створюються динамічно
# створення списку всіх пар елементів:

def generate_pairs(items):
   return [(items[i], items[j]) for i in range(len(items)) for j in range(i+1, len(items))]

items = [1, 2, 3, 4]
print(generate_pairs(items))
