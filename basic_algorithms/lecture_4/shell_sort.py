# Опис алгоритму сортування Шелла:
# 1. Вибираємо значення інтервалу (наприклад, половина списку).
# 2. Сортуємо елементи, що знаходяться на цьому інтервалі.
# 3. Зменшуємо інтервал і повторюємо кроки 1 і 2, поки інтервал не дорівнює 1.
# 4. Друкуємо відсортований список.
# Сортування Шелла є узагальненням сортування вставками, яке дозволяє обмінювати елементи, 
# які знаходяться далеко один від одного. З кожною ітерацією gap зменшується, 
# і ми наближаємося до звичайного сортування вставками
# часова складність алгоритму залежить від вибору інтервалу, але в середньому O(n^1.5)
# часова складність реалізації алгоритму на Python - квадратична O(n^2)

def shell_sort(arr):
    n = len(arr) # Визначаємо довжину масиву
    gap = n // 2 # Встановлюємо початковий розрив як половину довжини масиву
    
    while gap > 0:  # Продовжуємо цикл, поки розрив більше нуля
        for i in range(gap, n):  # Починаємо з елемента, що знаходиться на відстані розриву від початку
            temp = arr[i] # Зберігаємо поточний елемент у тимчасову змінну
            j = i # Ініціалізуємо j поточною позицією i
            while j >= gap and arr[j - gap] > temp: # Порівнюємо елементи на відстані розриву, зсуваємо елементи праворуч, якщо вони більші за temp
                arr[j] = arr[j - gap]  # Переміщаємо елемент arr[j - gap] на позицію j
                j -= gap  # Зменшуємо j на величину розриву
            arr[j] = temp # Вставляємо temp на правильну позицію
        gap //= 2 # Зменшуємо розрив удвічі

    return arr # Повертаємо відсортований масив

if __name__ == '__main__':
    numbers = [5, 3, 8, 4, 2]
    print(shell_sort(numbers)) # виведе: [2, 3, 4, 5, 8]