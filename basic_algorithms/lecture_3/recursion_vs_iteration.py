# ітерація здійснюється за допомогою циклічних структур (for, while)
# рекурсія - це виклик функції в тілі самої функції
# рекурсія - це досить дорога операція, оскільки кожен виклик функції займає пам'ять

# ітерація - це контрольований процес, де ми можемо контролювати кількість ітерацій

# ітераційний спосіб обчислення суми чисел від 1 до n
def sum_iter(n):
    result = 0
    for i in range(1, n + 1):
        result += i
    return result

print(sum_iter(5)) # виведе 15

# рекурсивний спосіб обчислення суми чисел від 1 до n
# рекурсія - це чистота коду, але вона може призвести до переповнення стека
# Рекурсія зазвичай більш доречна для задач, які можна легко розбити на менші, ідентичні підзадачі.
def sum_rec(n):
      if n == 0: # базовий випадок
         return 0
      else:
         return n + sum_rec(n - 1) # рекурсивний випадок
print(sum_rec(5)) # виведе 15

# ітераційний спосіб обчислення числа Фібоначчі

def fibonacci_iterative(n):
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n+1): # _ - це змінна, яка не використовується
        a, b = b, a + b
    return b

# Тестуємо функцію
print(fibonacci_iterative(10))  # Виведе: 55