# Хеш-таблиці - структури даних, які дозволяють зберігати пари ключ-значення.
#  словники в Python, об'єкти в JavaScript та хеш-мапи в Java
# Хеш-функція - перетворює ключі на індекси, за якими можна зберігати значення в масиві (списку)
# середній час доступу до елементу в хеш-таблиці - O(1) незалежно від розміру таблиці

# як працюють хеш-таблиці:
# 1. Хеш-функція перетворює ключ на число, яке використовується як індекс в масиві, де зберігається значення
# 2. Швидкий доступ: хеш-функція дає прямий індекс у масиві, ми можемо одразу перейти до правильного місця
# в таблиці, щоб знайти наше значення
# 3. Колізії: можливість, що два ключі можуть мати однаковий хеш, що призводить до колізії

# Python має вбудовану функцію hash(),використовується для операторів у контексті колекцій,
# таких як множини і словники, для швидкого пошуку елементів:
# 1. hash() може приймати будь-який не змінюваний тип даних: цілі числа, дійсні числа, рядки, кортежі
# 2. значення, яке повертає hash(), є "великим" числом, яке може бути більшим, ніж кількість слотів у вашій хеш-таблиці
# hash() генерує різні значення для кожної сесії Python для типів даних, які можуть бути змінені (наприклад, кортежі, що містять списки),
# тому вони не підходять для постійного зберігання або використання між різними сесіями Python

class HashTable:
    def __init__(self, size):
        self.size = size  # Зберігає розмір хеш-таблиці
        self.table = [[] for _ in range(self.size)]  # Створює таблицю з заданим розміром, де кожен елемент - порожній список

    def hash_function(self, key):
        return hash(key) % self.size  # Обчислює хеш значення для ключа і застосовує операцію модуль для отримання індексу в межах розміру таблиці

    def insert(self, key, value):
        key_hash = self.hash_function(key)  # Викликає хеш-функцію для обчислення індексу для даного ключа
        key_value = [key, value]  # Створює пару ключ-значення у вигляді списку

        for pair in self.table[key_hash]:  # Проходить по всіх парах у списку за індексом key_hash
            if pair[0] == key:  # Якщо знайдено пару з тим же ключем
                pair[1] = value  # Оновлює значення для цього ключа
                return True  # Повертає True, щоб показати успішне оновлення

        self.table[key_hash].append(key_value)  # Якщо ключ не знайдено, додає нову пару ключ-значення до списку
        return True  # Повертає True, щоб показати успішну вставку

    def get(self, key):
        key_hash = self.hash_function(key)  # Викликає хеш-функцію для обчислення індексу для даного ключа
        if self.table[key_hash] is not None:  # Перевіряє, чи існує запис у таблиці за обчисленим індексом
            for pair in self.table[key_hash]:  # Проходить по всіх парах у списку за індексом key_hash
                if pair[0] == key:  # Якщо знайдено пару з тим же ключем
                    return pair[1]  # Повертає значення, відповідне до ключа
        return None  # Якщо ключ не знайдено, повертає None

# Тестуємо нашу хеш-таблицю:
H = HashTable(5) # Створюємо хеш-таблицю з розміром 5 H.table = [[], [], [], [], []]

H.insert("apple", 10) # Додаємо пару ключ-значення до таблиці H.table = [[], [["apple", 10]], [], [], []]
H.insert("orange", 20)
H.insert("banana", 30)

print(H.get("apple"))   # Виведе: 10
print(H.get("orange"))  # Виведе: 20
print(H.get("banana"))  # Виведе: 30
