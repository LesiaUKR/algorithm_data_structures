# heaps (купа) - це спеціальний вид бінарного дерева, який задовольняє двом властивостям:
# 1. Купа - це повне бінарне дерево, тобто всі рівні крім можливо останнього заповнені повністю.
# 2. Купа - це дерево, в якому значення в кожному вузлі більше або рівне значенням його дітей.
# Купа може бути максимальною (max-heap) або мінімальною (min-heap).
# В max-heap значення в кожному вузлі більше або рівне значенням його дітей.
# В min-heap значення в кожному вузлі менше або рівне значенням його дітей.
# Купи це слабко впорядковані структури даних, тобто вони не впорядковані в порядку зростання або спадання.

# Складність операцій з купою:
# insert - O(log n)
# delete - O(log n) 
# search - O(n)

# Купа зазвичай може бути представлена у вигляді масиву, де індекси відповідають вузлам дерева.

# алгоритм побудови купи із масиву(heapifying):

# 1. Знайдіть індекс останнього батьківського вузла в масиві. Це буде (n-2)/2, де n — розмір масиву.
# 2. Почніть із цього вузла і рухайтеся у зворотному порядку до початку масиву.
# 3. Для кожного батьківського вузла застосуйте процедуру "heapify". 
# "Heapify" — це процес перестановки елементів, щоб відновити властивість купи. 
# Це робиться шляхом порівняння батьківського вузла з його дочірніми вузлами і обміном місцями,
# якщо властивість купи була порушена. Цей процес повторюється рекурсивно, якщо відбувається обмін.
# Часова складність цього процесу становить O(n)

# Купи корисні, коли:
# потрібно виконати завдання відповідно до пріоритетів
# для реалізації алгоритму Дейкстри
# для реалізації пірамідального сортування

# Функція heapify() в модулі heapq перетворює список у бінарну купу
# модуль heapq в Python надає функції для роботи з купою
import heapq

nums = [4, 10, 3, 5, 1]
heapq.heapify(nums)
print(nums)  # Output: [1, 4, 3, 5, 10]

# функція heappush додає елемент до купи
heapq.heappush(nums, 0)
print(nums)  # Output: [0, 4, 1, 5, 10, 3]

# функція heappop видаляє та повертає найменший елемент купи
min_elem = heapq.heappop(nums)
print(min_elem)  # Output: 0
print(nums)  # Output: [1, 4, 3, 5, 10]

# функція heappushpop додає новий елемент до купи і повертає найменший елемент
min_elem = heapq.heappushpop(nums, 2)
print(min_elem)  # Output: 1
print(nums)  # Output: [2, 4, 3, 5, 10]

# функція heapreplace видаляє та повертає найменший елемент купи, а потім додає новий елемент
min_elem = heapq.heapreplace(nums, 0)
print(min_elem)  # Output: 2
print(nums)  # Output: [0, 4, 3, 5, 10]

# функція nlargest повертає список n найбільших елементів купи
largest_three = heapq.nlargest(3, nums)
print(largest_three)  # Output: [10, 5, 4]

# функція nsmallest повертає список n найменших елементів купи
smallest_three = heapq.nsmallest(3, nums)
print(smallest_three)  # Output: [0, 3, 4]
print(nums)  # [0, 4, 3, 5, 10]

